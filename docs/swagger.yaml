basePath: /
definitions:
  model.Check:
    properties:
      data:
        additionalProperties: true
        description: Data is an optional field that can be used to provide additional
          information about the check.
        type: object
      kind:
        description: Kind is the kind of check.
        type: string
      name:
        description: Name is the name of the check.
        type: string
      status:
        description: Status is the status of the check.
        type: boolean
    type: object
  model.CreateUserRequest:
    properties:
      email:
        description: Email is the email address of the user.
        type: string
      first_name:
        description: FirstName is the first name of the user.
        type: string
      id:
        description: ID is the unique identifier of the user.
        type: string
      last_name:
        description: LastName is the last name of the user.
        type: string
    type: object
  model.Health:
    properties:
      checks:
        description: Checks is a list of health checks.
        items:
          $ref: '#/definitions/model.Check'
        type: array
      status:
        description: Status is the status of the health check.
        type: boolean
    type: object
  model.ListUserResponse:
    properties:
      data:
        description: Items is a list of users.
        items:
          $ref: '#/definitions/model.User'
        type: array
      paginator:
        allOf:
        - $ref: '#/definitions/paginator.Paginator'
        description: Paginator is the paginator for the list of users.
    type: object
  model.User:
    properties:
      created_at:
        description: Email is the email address of the user.
        type: string
      email:
        description: Email is the email address of the user.
        type: string
      first_name:
        description: FirstName is the first name of the user.
        type: string
      id:
        description: ID is the unique identifier of the user.
        type: string
      last_name:
        description: LastName is the last name of the user.
        type: string
      updated_at:
        description: UpdatedAt is the time the user was last updated.
        type: string
    type: object
  paginator.Paginator:
    properties:
      limit:
        description: Limit is the maximum number of elements to return.
        type: integer
      next:
        description: Next is the cursor token to the next page.
        type: string
      previous:
        description: Prev is the cursor token to the previous page.
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: |-
    This is a service template for building RESTful APIs in Go.
    It uses a PostgreSQL database to store user information.
    The service provides:
    - CRUD operations for users.
    - Health and version endpoints.
    - Configuration using environment variables or command line arguments.
    - Debug mode to enable debug logging.
    - TLS enabled to secure the communication.
  version: 1.0.0
paths:
  /health:
    get:
      description: Get the health of the service
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Health'
      summary: Get the health of the service
      tags:
      - health
  /healthz:
    get:
      description: Get the health of the service
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Health'
      summary: Get the health of the service
      tags:
      - health
  /status:
    get:
      description: Get the health of the service
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Health'
      summary: Get the health of the service
      tags:
      - health
  /users:
    get:
      description: List all users
      parameters:
      - description: Sort field
        in: query
        name: sort
        type: string
      - description: Filter field
        in: query
        name: filter
        type: string
      - description: Fields to return
        in: query
        name: fields
        type: string
      - description: Query string
        in: query
        name: query
        type: string
      - description: Next cursor
        in: query
        name: next
        type: string
      - description: Previous cursor
        in: query
        name: prev
        type: string
      - description: Limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ListUserResponse'
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: List all users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create a new user
      parameters:
      - description: CreateUserRequest
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.CreateUserRequest'
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Create a new user
      tags:
      - users
  /users/{id}:
    delete:
      description: Delete a user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Delete a user
      tags:
      - users
    get:
      description: Get a user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Query string
        in: query
        name: query
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get a user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update a user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Update a user
      tags:
      - users
swagger: "2.0"
