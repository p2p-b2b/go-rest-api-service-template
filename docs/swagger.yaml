definitions:
  model.Check:
    description: Health check of the service.
    properties:
      data:
        additionalProperties: {}
        type: object
      kind:
        example: database
        format: string
        type: string
      name:
        example: database
        format: string
        type: string
      status:
        description: Health status of a service.
        example: true
        format: string
        type: boolean
    type: object
  model.CreatePolicyRequest:
    description: Create a policy.
    properties:
      allowed_action:
        example: GET
        format: string
        type: string
      allowed_resource:
        example: /projects/39a4707f-536e-433f-8597-6fc0d53a724f/tokens
        format: string
        type: string
      description:
        example: This allows to list all the policies of a specific project
        format: string
        type: string
      id:
        example: 01980434-b7ff-7a9e-b343-668d79691032
        format: uuid
        type: string
      name:
        example: List Policies for project
        format: string
        type: string
    required:
    - allowed_action
    - allowed_resource
    - name
    type: object
  model.CreateProductRequest:
    description: CreateProductRequest represents the input for the CreateProduct method.
    properties:
      description:
        example: This is a product
        format: string
        type: string
      id:
        example: 01980434-b7ff-7ac1-b7b0-13de306cc1cb
        format: uuid
        type: string
      name:
        example: New product name
        format: string
        type: string
    type: object
  model.CreateProjectRequest:
    description: CreateProjectRequest represents the inputs necessary to create a
      new project.
    properties:
      description:
        example: This is a new project
        format: string
        type: string
      id:
        example: 01980434-b7ff-7aa6-a131-a7c3590a1ce1
        format: uuid
        type: string
      name:
        example: New project name
        format: string
        type: string
    required:
    - description
    - name
    type: object
  model.CreateRoleRequest:
    description: CreateRoleRequest represents the input for the CreateRole method.
    properties:
      description:
        example: This is a role
        format: string
        type: string
      id:
        example: 01980434-b7ff-7aba-a3ef-1b38309c9a1f
        format: uuid
        type: string
      name:
        example: New role name
        format: string
        type: string
    required:
    - description
    - name
    type: object
  model.CreateUserRequest:
    description: Create user request.
    properties:
      email:
        example: my@email.com
        format: email
        type: string
      first_name:
        example: John
        format: string
        type: string
      id:
        example: 01980434-b7ff-7ab2-b903-524ba1d47616
        format: uuid
        type: string
      last_name:
        example: Doe
        format: string
        type: string
      password:
        example: ThisIs4Passw0rd
        format: string
        type: string
    required:
    - email
    - first_name
    - last_name
    - password
    type: object
  model.HTTPMessage:
    description: HTTPMessage represents a message to be sent to the client trough
      HTTP REST API.
    properties:
      message:
        example: success
        format: string
        type: string
      method:
        example: GET
        format: string
        type: string
      path:
        example: /api/v1/users
        format: string
        type: string
      status_code:
        example: 200
        format: int32
        type: integer
      timestamp:
        example: "2021-07-01T00:00:00Z"
        format: date-time
        type: string
    type: object
  model.Health:
    description: Health check of the service.
    properties:
      checks:
        items:
          $ref: '#/definitions/model.Check'
        type: array
      status:
        description: Health status of a service.
        example: true
        format: string
        type: boolean
    type: object
  model.LinkPoliciesToRoleRequest:
    description: LinkPoliciesToRoleRequest input values for linking policies to a
      role.
    properties:
      policy_ids:
        items:
          format: uuid
          type: string
        type: array
    required:
    - policy_ids
    type: object
  model.LinkRolesToPolicyRequest:
    description: Link roles to a policy.
    properties:
      role_ids:
        example:
        - 01980434-b7ff-7a96-b0c8-dbabed881cf5
        items:
          format: uuid
          type: string
        type: array
    required:
    - role_ids
    type: object
  model.LinkRolesToUserRequest:
    description: Link roles request.
    properties:
      role_ids:
        items:
          format: uuid
          type: string
        type: array
    required:
    - role_ids
    type: object
  model.LinkUsersToRoleRequest:
    description: LinkUsersToRoleRequest input values for linking users to a role.
    properties:
      user_ids:
        items:
          format: uuid
          type: string
        type: array
    required:
    - user_ids
    type: object
  model.ListPoliciesResponse:
    properties:
      items:
        items:
          $ref: '#/definitions/model.Policy'
        type: array
      paginator:
        $ref: '#/definitions/model.Paginator'
    type: object
  model.ListProductsResponse:
    description: ListProductResponse represents a list of users.
    properties:
      items:
        items:
          $ref: '#/definitions/model.Product'
        type: array
      paginator:
        $ref: '#/definitions/model.Paginator'
    type: object
  model.ListProjectsResponse:
    description: ListProjectsResponse represents a list of users.
    properties:
      items:
        items:
          $ref: '#/definitions/model.Project'
        type: array
      paginator:
        $ref: '#/definitions/model.Paginator'
    type: object
  model.ListResourcesResponse:
    description: ListResourcesResponse represents a list of users.
    properties:
      items:
        items:
          $ref: '#/definitions/model.Resource'
        type: array
      paginator:
        $ref: '#/definitions/model.Paginator'
    type: object
  model.ListRolesResponse:
    description: ListRoleResponse represents a list of users.
    properties:
      items:
        items:
          $ref: '#/definitions/model.Role'
        type: array
      paginator:
        $ref: '#/definitions/model.Paginator'
    type: object
  model.ListUsersResponse:
    description: List of users.
    properties:
      items:
        items:
          $ref: '#/definitions/model.User'
        type: array
      paginator:
        $ref: '#/definitions/model.Paginator'
    type: object
  model.LoginUserRequest:
    description: LoginUserRequest is the request struct for the LoginUser handler.
    properties:
      email:
        example: admin@qu3ry.me
        format: email
        type: string
      password:
        example: ThisIsApassw0rd.,
        format: string
        type: string
    required:
    - email
    - password
    type: object
  model.LoginUserResponse:
    description: LoginUserResponse is the response when a user logs in.
    properties:
      access_token:
        format: string
        type: string
      permissions:
        additionalProperties: {}
        format: object
        type: object
      refresh_token:
        format: string
        type: string
      tokenType:
        $ref: '#/definitions/model.TokenType'
      user_id:
        example: 01980434-b7ff-7a54-a71f-34868a34e51e
        format: uuid
        type: string
    type: object
  model.Paginator:
    description: Paginator represents a paginator.
    properties:
      limit:
        example: 10
        format: int
        type: integer
      next_page:
        example: http://localhost:8080/users?next_token=ZmZmZmZmZmYtZmZmZi0tZmZmZmZmZmY=&limit=10
        format: string
        type: string
      next_token:
        example: ZmZmZmZmZmYtZmZmZi0tZmZmZmZmZmY=
        format: string
        type: string
      prev_page:
        example: http://localhost:8080/users?prev_token=ZmZmZmZmZmYtZmZmZi0tZmZmZmZmZmY=&limit=10
        format: string
        type: string
      prev_token:
        example: ZmZmZmZmZmYtZmZmZi0tZmZmZmZmZmY=
        format: string
        type: string
      size:
        example: 10
        format: int
        type: integer
    type: object
  model.Policy:
    description: Policy represents a role.
    properties:
      allowed_action:
        example: GET
        format: string
        type: string
      allowed_resource:
        example: /projects/39a4707f-536e-433f-8597-6fc0d53a724f/tokens
        format: string
        type: string
      created_at:
        example: "2021-01-01T00:00:00Z"
        format: date-time
        type: string
      description:
        example: This is a role
        format: string
        type: string
      id:
        example: 01980434-b7ff-7a93-b5b4-ca4c73283131
        format: uuid
        type: string
      name:
        example: Policy Name
        format: string
        type: string
      resource:
        $ref: '#/definitions/model.Resource'
      system:
        example: false
        format: boolean
        type: boolean
      updated_at:
        example: "2021-01-01T00:00:00Z"
        format: date-time
        type: string
    type: object
  model.Product:
    description: Product represents a product.
    properties:
      created_at:
        example: "2021-01-01T00:00:00Z"
        format: date-time
        type: string
      description:
        example: This is a product
        format: string
        type: string
      id:
        example: 01980434-b7ff-7abe-a45d-7311bc7011f5
        format: uuid
        type: string
      name:
        example: Product Name
        format: string
        type: string
      project:
        $ref: '#/definitions/model.Project'
      updated_at:
        example: "2021-01-01T00:00:00Z"
        format: date-time
        type: string
    type: object
  model.Project:
    description: Project represents a project.
    properties:
      created_at:
        example: "2021-01-01T00:00:00Z"
        format: date-time
        type: string
      description:
        example: This is a project
        format: string
        type: string
      disabled:
        example: false
        format: boolean
        type: boolean
      id:
        example: 01980434-b7ff-7aa2-bfc2-d862a423985c
        format: uuid
        type: string
      name:
        example: John
        format: string
        type: string
      system:
        example: false
        format: boolean
        type: boolean
      updated_at:
        example: "2021-01-01T00:00:00Z"
        format: date-time
        type: string
    type: object
  model.ReVerifyUserRequest:
    description: ReVerifyUserRequest is the request struct for the ReVerifyUser handler.
    properties:
      email:
        example: user@mail.com
        format: email
        type: string
    required:
    - email
    type: object
  model.RefreshTokenRequest:
    description: RefreshTokenRequest is the request struct for the RefreshToken handler.
    properties:
      refresh_token:
        format: string
        type: string
    type: object
  model.RefreshTokenResponse:
    description: RefreshTokenResponse is the response when a user refreshes their
      token.
    properties:
      access_token:
        format: string
        type: string
      refresh_token:
        format: string
        type: string
      tokenType:
        $ref: '#/definitions/model.TokenType'
    type: object
  model.RegisterUserRequest:
    description: RegisterUserRequest is the request struct for the RegisterUser handler.
    properties:
      email:
        example: john.doe@email.com
        format: email
        type: string
      first_name:
        example: John
        format: string
        type: string
      id:
        example: 01980434-b7ff-7a8b-b8e9-144341357314
        format: uuid
        type: string
      last_name:
        example: Doe
        format: string
        type: string
      password:
        example: ThisIsApassw0rd.,
        format: string
        type: string
    required:
    - email
    - first_name
    - last_name
    - password
    type: object
  model.Resource:
    description: Resource represents a permission.
    properties:
      action:
        example: GET
        format: string
        type: string
      created_at:
        example: "2021-01-01T00:00:00Z"
        format: date-time
        type: string
      description:
        example: Allows reading of users
        format: string
        type: string
      id:
        example: 01980434-b7ff-7aaa-a09c-d46077eff792
        format: uuid
        type: string
      name:
        example: Read Users
        format: string
        type: string
      resource:
        example: users
        format: string
        type: string
      system:
        example: false
        format: bool
        type: boolean
      updated_at:
        example: "2021-01-01T00:00:00Z"
        format: date-time
        type: string
    type: object
  model.Role:
    description: Role represents a role.
    properties:
      auto_assign:
        example: false
        format: boolean
        type: boolean
      created_at:
        example: "2021-01-01T00:00:00Z"
        format: date-time
        type: string
      description:
        example: This is a role
        format: string
        type: string
      id:
        example: 01980434-b7ff-7ab6-8c97-3e2f8905173a
        format: uuid
        type: string
      name:
        example: Role Name
        format: string
        type: string
      system:
        example: false
        format: boolean
        type: boolean
      updated_at:
        example: "2021-01-01T00:00:00Z"
        format: date-time
        type: string
    type: object
  model.TokenType:
    enum:
    - access
    - refresh
    - email_verification
    - password_reset
    - personal_access
    - Bearer
    type: string
    x-enum-comments:
      TokenTypeBearer: This is used for the HTTP Authorization header
    x-enum-descriptions:
    - This is used for the HTTP Authorization header
    x-enum-varnames:
    - TokenTypeAccess
    - TokenTypeRefresh
    - TokenTypeEmailVerification
    - TokenTypePasswordReset
    - TokenTypePersonalAccess
    - TokenTypeBearer
  model.UnlinkPoliciesFromRoleRequest:
    description: LinkPoliciesToRoleRequest input values for linking policies to a
      role.
    properties:
      policy_ids:
        items:
          format: uuid
          type: string
        type: array
    required:
    - policy_ids
    type: object
  model.UnlinkRolesFromPolicyRequest:
    description: Link roles to a policy.
    properties:
      role_ids:
        example:
        - 01980434-b7ff-7a96-b0c8-dbabed881cf5
        items:
          format: uuid
          type: string
        type: array
    required:
    - role_ids
    type: object
  model.UnlinkRolesFromUserRequest:
    description: Link roles request.
    properties:
      role_ids:
        items:
          format: uuid
          type: string
        type: array
    required:
    - role_ids
    type: object
  model.UnlinkUsersFromRoleRequest:
    description: LinkUsersToRoleRequest input values for linking users to a role.
    properties:
      user_ids:
        items:
          format: uuid
          type: string
        type: array
    required:
    - user_ids
    type: object
  model.UpdatePolicyRequest:
    description: Update a policy.
    properties:
      allowed_action:
        example: GET
        format: string
        type: string
      allowed_resource:
        example: /projects/39a4707f-536e-433f-8597-6fc0d53a724f/tokens
        format: string
        type: string
      description:
        example: This is a role
        format: string
        type: string
      name:
        example: Policy Name
        format: string
        type: string
    type: object
  model.UpdateProductRequest:
    description: UpdateProductRequest represents the input for the UpdateProduct method.
    properties:
      description:
        example: This is a product
        format: string
        type: string
      name:
        example: Modified product name
        format: string
        type: string
    type: object
  model.UpdateProjectRequest:
    description: UpdateProjectRequest represents the inputs necessary to update a
      project.
    properties:
      description:
        example: This is a new project data
        format: string
        type: string
      disabled:
        example: false
        format: boolean
        type: boolean
      name:
        example: New project name
        format: string
        type: string
    type: object
  model.UpdateRoleRequest:
    description: UpdateRoleRequest represents the input for the UpdateRole method.
    properties:
      description:
        example: This is a role
        format: string
        type: string
      name:
        example: Modified role name
        format: string
        type: string
    type: object
  model.UpdateUserRequest:
    description: Update user request.
    properties:
      disabled:
        example: false
        format: boolean
        type: boolean
      email:
        example: my@email.com
        format: email
        type: string
      first_name:
        example: John
        format: string
        type: string
      last_name:
        example: Doe
        format: string
        type: string
      password:
        example: ThisIs4Passw0rd
        format: string
        type: string
    type: object
  model.User:
    description: User represents a user entity.
    properties:
      admin:
        example: false
        format: boolean
        type: boolean
      created_at:
        example: "2021-01-01T00:00:00Z"
        format: date-time
        type: string
      disabled:
        example: false
        format: boolean
        type: boolean
      email:
        example: my@email.com
        format: email
        type: string
      first_name:
        example: John
        format: string
        type: string
      id:
        example: 01980434-b7ff-7aae-95c6-051c9895119c
        format: uuid
        type: string
      last_name:
        example: Doe
        format: string
        type: string
      updated_at:
        example: "2021-01-01T00:00:00Z"
        format: date-time
        type: string
    type: object
  model.Version:
    description: Version is the struct that holds the version information.
    properties:
      build_date:
        example: "2021-01-01T00:00:00Z"
        format: string
        type: string
      git_branch:
        example: main
        format: string
        type: string
      git_commit:
        example: abcdef123456
        format: string
        type: string
      go_version:
        example: go1.24.1
        format: string
        type: string
      go_version_arch:
        example: amd64
        format: string
        type: string
      go_version_os:
        example: linux
        format: string
        type: string
      version:
        example: 1.0.0
        format: string
        type: string
    type: object
info:
  contact:
    email: info@qu3ry.me
    name: API Support
    url: https://qu3ry.me
  description: |-
    This is a service template for building RESTful APIs in Go.
    It uses a PostgreSQL database to store user information.
    The service provides:
    - CRUD operations for users.
    - Health and version endpoints.
    - Configuration using environment variables or command line arguments.
    - Debug mode to enable debug logging.
    - TLS enabled to secure the communication.
  title: Go REST API Service Template
  version: v1
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user credentials and return JWT access and refresh
        tokens
      operationId: 0198042a-f9c5-7547-a6e7-567af5db26cd
      parameters:
      - description: The information of the user to login
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/model.LoginUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.LoginUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPMessage'
      summary: Login user
      tags:
      - Auth
  /auth/logout:
    delete:
      consumes:
      - application/json
      description: Logout user and invalidate session tokens
      operationId: 0198042a-f9c5-75d4-afa6-fe658744c80f
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPMessage'
      security:
      - AccessToken: []
      summary: Logout user
      tags:
      - Auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Generate new access token using valid refresh token
      operationId: 0198042a-f9c5-75d8-aa7b-37524ea4f124
      parameters:
      - description: The refresh token to use
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/model.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.RefreshTokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPMessage'
      security:
      - RefreshToken: []
      summary: Refresh access token
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Create a new user account and send email verification
      operationId: 0198042a-f9c5-75c8-9231-ad5fc9e7b32e
      parameters:
      - description: The information of the user to register
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/model.RegisterUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPMessage'
      summary: Register user
      tags:
      - Auth
  /auth/verify:
    post:
      consumes:
      - application/json
      description: Resend account verification email to user
      operationId: 0198042a-f9c5-75d0-8c20-fea31b65587f
      parameters:
      - description: The email of the user to re-verify
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/model.ReVerifyUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPMessage'
      summary: Resend verification
      tags:
      - Auth
  /auth/verify/{jwt}:
    get:
      description: Verify user account using JWT verification token
      operationId: 0198042a-f9c5-75cc-9dd2-e3ff9f6c1e3a
      parameters:
      - description: The JWT token to use
        format: jwt
        in: path
        name: jwt
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPMessage'
      summary: Verify user
      tags:
      - Auth
  /health/status:
    get:
      description: Check service health status including database connectivity and
        system metrics
      operationId: 0198042a-f9c5-76be-ba9e-8186a69f48c4
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Health'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPMessage'
      summary: Check health
      tags:
      - Health
  /policies:
    get:
      description: Retrieve paginated list of all policies in the system
      operationId: 0198042a-f9c5-76d2-a491-9cc989c1d59c
      parameters:
      - description: 'Comma-separated list of fields to sort by. Example: first_name
          ASC, created_at DESC'
        format: string
        in: query
        name: sort
        type: string
      - description: 'Filter field. Example: id=1 AND first_name=''John'''
        format: string
        in: query
        name: filter
        type: string
      - description: 'Fields to return. Example: id,first_name,last_name'
        format: string
        in: query
        name: fields
        type: string
      - description: Next cursor
        format: string
        in: query
        name: next_token
        type: string
      - description: Previous cursor
        format: string
        in: query
        name: prev_token
        type: string
      - description: Limit
        format: int
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ListPoliciesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPMessage'
      security:
      - AccessToken: []
      summary: List policies
      tags:
      - Policies
    post:
      consumes:
      - application/json
      description: Create a new policy with specified permissions
      operationId: 0198042a-f9c5-76c6-9a07-0c8948640ac2
      parameters:
      - description: Create policy Request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/model.CreatePolicyRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPMessage'
      security:
      - AccessToken: []
      summary: Create policy
      tags:
      - Policies
  /policies/{policy_id}:
    delete:
      description: Remove a policy permanently from the system
      operationId: 0198042a-f9c5-76ce-b208-2f58f7ccd177
      parameters:
      - description: The policy id in UUID format
        format: uuid
        in: path
        name: policy_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPMessage'
      security:
      - AccessToken: []
      summary: Delete policy
      tags:
      - Policies
    get:
      description: Retrieve a specific policy by its unique identifier
      operationId: 0198042a-f9c5-76c2-96f2-d16b0674bcd9
      parameters:
      - description: The policy id in UUID format
        format: uuid
        in: path
        name: policy_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Policy'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPMessage'
      security:
      - AccessToken: []
      summary: Get policy
      tags:
      - Policies
    put:
      consumes:
      - application/json
      description: Modify an existing policy by its ID
      operationId: 0198042a-f9c5-76ca-b40d-b1de1d359c22
      parameters:
      - description: The policy id in UUID format
        format: uuid
        in: path
        name: policy_id
        required: true
        type: string
      - description: Update policy Request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/model.UpdatePolicyRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPMessage'
      security:
      - AccessToken: []
      summary: Update policy
      tags:
      - Policies
  /policies/{policy_id}/roles:
    delete:
      consumes:
      - application/json
      description: Remove role associations from a specific policy
      operationId: 0198042a-f9c5-76d9-8019-babd51a0c340
      parameters:
      - description: The policy id in UUID format
        format: uuid
        in: path
        name: policy_id
        required: true
        type: string
      - description: Unlink policy from roles Request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/model.UnlinkRolesFromPolicyRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPMessage'
      security:
      - AccessToken: []
      summary: Unlink roles from policy
      tags:
      - Policies
      - Roles
    get:
      description: Retrieve paginated list of roles associated with a specific policy
      operationId: 0198042a-f9c5-7704-b73b-55e2ec093587
      parameters:
      - description: The policy id in UUID format
        format: uuid
        in: path
        name: policy_id
        required: true
        type: string
      - description: 'Comma-separated list of fields to sort by. Example: first_name
          ASC, created_at DESC'
        format: string
        in: query
        name: sort
        type: string
      - description: 'Filter field. Example: id=1 AND first_name=''John'''
        format: string
        in: query
        name: filter
        type: string
      - description: 'Fields to return. Example: id,first_name,last_name'
        format: string
        in: query
        name: fields
        type: string
      - description: Next cursor
        format: string
        in: query
        name: next_token
        type: string
      - description: Previous cursor
        format: string
        in: query
        name: prev_token
        type: string
      - description: Limit
        format: int
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ListRolesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPMessage'
      security:
      - AccessToken: []
      summary: List roles by policy
      tags:
      - Roles
      - Policies
    post:
      consumes:
      - application/json
      description: Associate multiple roles with a specific policy for authorization
      operationId: 0198042a-f9c5-76d6-b1f3-0bfb57a9197f
      parameters:
      - description: The policy id in UUID format
        format: uuid
        in: path
        name: policy_id
        required: true
        type: string
      - description: Link policy to roles Request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/model.LinkRolesToPolicyRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPMessage'
      security:
      - AccessToken: []
      summary: Link roles to policy
      tags:
      - Policies
      - Roles
  /products:
    get:
      description: Retrieve paginated list of all products in the system
      operationId: 0198042a-f9c5-7612-a055-58177eca0772
      parameters:
      - description: 'Comma-separated list of fields to sort by. Example: first_name
          ASC, created_at DESC'
        format: string
        in: query
        name: sort
        type: string
      - description: 'Filter field. Example: id=1 AND first_name=''John'''
        format: string
        in: query
        name: filter
        type: string
      - description: 'Fields to return. Example: id,first_name,last_name'
        format: string
        in: query
        name: fields
        type: string
      - description: Next cursor
        format: string
        in: query
        name: next_token
        type: string
      - description: Previous cursor
        format: string
        in: query
        name: prev_token
        type: string
      - description: Limit
        format: int
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ListProductsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPMessage'
      security:
      - AccessToken: []
      summary: List products
      tags:
      - Products
  /projects:
    get:
      description: Retrieve paginated list of all projects in the system
      operationId: 0198042a-f9c5-76a7-a480-fbcb978b8501
      parameters:
      - description: 'Comma-separated list of fields to sort by. Example: first_name
          ASC, created_at DESC'
        format: string
        in: query
        name: sort
        type: string
      - description: 'Filter field. Example: id=1 AND first_name=''John'''
        format: string
        in: query
        name: filter
        type: string
      - description: 'Fields to return. Example: id,first_name,last_name'
        format: string
        in: query
        name: fields
        type: string
      - description: Next cursor
        format: string
        in: query
        name: next_token
        type: string
      - description: Previous cursor
        format: string
        in: query
        name: prev_token
        type: string
      - description: Limit
        format: int
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ListProjectsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPMessage'
      security:
      - AccessToken: []
      summary: List projects
      tags:
      - Projects
    post:
      consumes:
      - application/json
      description: Create a new project with specified configuration
      operationId: 0198042a-f9c5-7622-9142-88fbaa727659
      parameters:
      - description: Create Project Request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/model.CreateProjectRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPMessage'
      security:
      - AccessToken: []
      summary: Create project
      tags:
      - Projects
  /projects/{project_id}:
    delete:
      description: Remove a project permanently from the system
      operationId: 0198042a-f9c5-762a-8033-649a1526901d
      parameters:
      - description: The project id in UUID format
        format: uuid
        in: path
        name: project_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPMessage'
      security:
      - AccessToken: []
      summary: Delete project
      tags:
      - Projects
    get:
      description: Retrieve a specific project by its unique identifier
      operationId: 0198042a-f9c5-761e-b1c2-66a3f8ab30d6
      parameters:
      - description: The project id in UUID format
        format: uuid
        in: path
        name: project_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Project'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPMessage'
      security:
      - AccessToken: []
      summary: Get project
      tags:
      - Projects
    put:
      consumes:
      - application/json
      description: Modify an existing project by its ID
      operationId: 0198042a-f9c5-7626-be9f-996a2898ef07
      parameters:
      - description: The project id in UUID format
        format: uuid
        in: path
        name: project_id
        required: true
        type: string
      - description: Update Project Request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/model.UpdateProjectRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPMessage'
      security:
      - AccessToken: []
      summary: Update project
      tags:
      - Projects
  /projects/{project_id}/products:
    get:
      description: Retrieve paginated list of products for a specific project
      operationId: 0198042a-f9c5-760e-9d2f-94cce8243e5a
      parameters:
      - description: The project id in UUID format
        format: uuid
        in: path
        name: project_id
        required: true
        type: string
      - description: 'Comma-separated list of fields to sort by. Example: first_name
          ASC, created_at DESC'
        format: string
        in: query
        name: sort
        type: string
      - description: 'Filter field. Example: id=1 AND first_name=''John'''
        format: string
        in: query
        name: filter
        type: string
      - description: 'Fields to return. Example: id,first_name,last_name'
        format: string
        in: query
        name: fields
        type: string
      - description: Next cursor
        format: string
        in: query
        name: next_token
        type: string
      - description: Previous cursor
        format: string
        in: query
        name: prev_token
        type: string
      - description: Limit
        format: int
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ListProductsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPMessage'
      security:
      - AccessToken: []
      summary: List products by project
      tags:
      - Products
      - Projects
    post:
      consumes:
      - application/json
      description: Create a new product with specified configuration
      operationId: 0198042a-f9c5-7606-8aab-1c2db5b81a89
      parameters:
      - description: The project id in UUID format
        format: uuid
        in: path
        name: project_id
        required: true
        type: string
      - description: Create product request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/model.CreateProductRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPMessage'
      security:
      - AccessToken: []
      summary: Create product
      tags:
      - Products
      - Projects
  /projects/{project_id}/products/{product_id}:
    delete:
      description: Remove a product permanently from the system
      operationId: 0198042a-f9c5-760a-99c8-1f68d597d300
      parameters:
      - description: The project id in UUID format
        format: uuid
        in: path
        name: project_id
        required: true
        type: string
      - description: The product id in UUID format
        format: uuid
        in: path
        name: product_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPMessage'
      security:
      - AccessToken: []
      summary: Delete product
      tags:
      - Products
      - Projects
    get:
      description: Retrieve a specific product by its unique identifier
      operationId: 0198042a-f9c5-7603-99b1-7c20ee58542b
      parameters:
      - description: The project id in UUID format
        format: uuid
        in: path
        name: project_id
        required: true
        type: string
      - description: The product id in UUID format
        format: uuid
        in: path
        name: product_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPMessage'
      security:
      - AccessToken: []
      summary: Get product
      tags:
      - Products
      - Projects
    put:
      consumes:
      - application/json
      description: Modify an existing product by its ID
      operationId: 0198042a-f9c5-7607-b75a-532912a6f35d
      parameters:
      - description: The project id in UUID format
        format: uuid
        in: path
        name: project_id
        required: true
        type: string
      - description: The model id in UUID format
        format: uuid
        in: path
        name: product_id
        required: true
        type: string
      - description: Update product request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/model.UpdateProductRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPMessage'
      security:
      - AccessToken: []
      summary: Update product
      tags:
      - Products
      - Projects
  /resources:
    get:
      description: Retrieve paginated list of all resources in the system
      operationId: 0198042a-f9c5-76b6-bd55-f34dff7b0632
      parameters:
      - description: 'Comma-separated list of fields to sort by. Example: first_name
          ASC, created_at DESC'
        format: string
        in: query
        name: sort
        type: string
      - description: 'Filter field. Example: id=1 AND first_name=''John'''
        format: string
        in: query
        name: filter
        type: string
      - description: 'Fields to return. Example: id,first_name,last_name'
        format: string
        in: query
        name: fields
        type: string
      - description: Next cursor
        format: string
        in: query
        name: next_token
        type: string
      - description: Previous cursor
        format: string
        in: query
        name: prev_token
        type: string
      - description: Limit
        format: int
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ListResourcesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPMessage'
      security:
      - AccessToken: []
      summary: List resources
      tags:
      - Resources
  /resources/{resource_id}:
    get:
      description: Retrieve a specific resource by its identifier
      operationId: 0198042a-f9c5-76b2-b8b1-bc0223a0f18d
      parameters:
      - description: The permission id in UUID format
        format: uuid
        in: path
        name: resource_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Resource'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPMessage'
      security:
      - AccessToken: []
      summary: Get resource
      tags:
      - Resources
  /resources/matches:
    get:
      description: Find resources that match specific action and resource policy patterns
      operationId: 0198042a-f9c5-76ba-bc87-6e9e32988407
      parameters:
      - description: Action to filter by
        format: string
        in: query
        name: action
        required: true
        type: string
      - description: Resource to filter by
        format: string
        in: query
        name: resource
        required: true
        type: string
      - description: 'Comma-separated list of fields to sort by. Example: first_name
          ASC, created_at DESC'
        format: string
        in: query
        name: sort
        type: string
      - description: 'Fields to return. Example: id,first_name,last_name'
        format: string
        in: query
        name: fields
        type: string
      - description: Next cursor
        format: string
        in: query
        name: next_token
        type: string
      - description: Previous cursor
        format: string
        in: query
        name: prev_token
        type: string
      - description: Limit
        format: int
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ListResourcesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPMessage'
      security:
      - AccessToken: []
      summary: Match resources
      tags:
      - Resources
  /roles:
    get:
      description: Retrieve paginated list of all roles in the system
      operationId: 0198042a-f9c5-76f1-9cf8-37e45b647fc0
      parameters:
      - description: 'Comma-separated list of fields to sort by. Example: first_name
          ASC, created_at DESC'
        format: string
        in: query
        name: sort
        type: string
      - description: 'Filter field. Example: id=1 AND first_name=''John'''
        format: string
        in: query
        name: filter
        type: string
      - description: 'Fields to return. Example: id,first_name,last_name'
        format: string
        in: query
        name: fields
        type: string
      - description: Next cursor
        format: string
        in: query
        name: next_token
        type: string
      - description: Previous cursor
        format: string
        in: query
        name: prev_token
        type: string
      - description: Limit
        format: int
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ListRolesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPMessage'
      security:
      - AccessToken: []
      summary: List roles
      tags:
      - Roles
    post:
      consumes:
      - application/json
      description: Create a new role with specified permissions and access levels
      operationId: 0198042a-f9c5-76e5-8fe5-b93a07311c47
      parameters:
      - description: Create role request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/model.CreateRoleRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPMessage'
      security:
      - AccessToken: []
      summary: Create role
      tags:
      - Roles
  /roles/{role_id}:
    delete:
      description: Remove a role permanently from the system
      operationId: 0198042a-f9c5-76ed-99a5-84923071fa6b
      parameters:
      - description: The role id in UUID format
        format: uuid
        in: path
        name: role_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPMessage'
      security:
      - AccessToken: []
      summary: Delete role
      tags:
      - Roles
    get:
      description: Retrieve a specific role by its unique identifier
      operationId: 0198042a-f9c5-76e1-a650-772c826f079e
      parameters:
      - description: The role id in UUID format
        format: uuid
        in: path
        name: role_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Role'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPMessage'
      security:
      - AccessToken: []
      summary: Get role
      tags:
      - Roles
    put:
      consumes:
      - application/json
      description: Modify an existing role by its ID
      operationId: 0198042a-f9c5-76e9-922d-2411530cd8f8
      parameters:
      - description: The model id in UUID format
        format: uuid
        in: path
        name: role_id
        required: true
        type: string
      - description: Update role request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/model.UpdateRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPMessage'
      security:
      - AccessToken: []
      summary: Update role
      tags:
      - Roles
  /roles/{role_id}/policies:
    delete:
      consumes:
      - application/json
      description: Remove policy associations from a specific role
      operationId: 0198042a-f9c5-7700-9e40-e64f7b8c947c
      parameters:
      - description: The role id in UUID format
        format: uuid
        in: path
        name: role_id
        required: true
        type: string
      - description: UnLink policies from role request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/model.UnlinkPoliciesFromRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPMessage'
      security:
      - AccessToken: []
      summary: Unlink policies from role
      tags:
      - Roles
      - Policies
    get:
      description: Retrieve paginated list of policies associated with a specific
        role
      operationId: 0198042a-f9c5-76dd-8fa8-98df6be12d44
      parameters:
      - description: The role id in UUID format
        format: uuid
        in: path
        name: role_id
        required: true
        type: string
      - description: 'Comma-separated list of fields to sort by. Example: first_name
          ASC, created_at DESC'
        format: string
        in: query
        name: sort
        type: string
      - description: 'Filter field. Example: id=1 AND first_name=''John'''
        format: string
        in: query
        name: filter
        type: string
      - description: 'Fields to return. Example: id,first_name,last_name'
        format: string
        in: query
        name: fields
        type: string
      - description: Next cursor
        format: string
        in: query
        name: next_token
        type: string
      - description: Previous cursor
        format: string
        in: query
        name: prev_token
        type: string
      - description: Limit
        format: int
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ListPoliciesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPMessage'
      security:
      - AccessToken: []
      summary: List policies by role
      tags:
      - Policies
      - Roles
    post:
      consumes:
      - application/json
      description: Associate multiple policies with a specific role for authorization
      operationId: 0198042a-f9c5-76fd-8012-5c9a2957e289
      parameters:
      - description: The role id in UUID format
        format: uuid
        in: path
        name: role_id
        required: true
        type: string
      - description: Link policies to role request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/model.LinkPoliciesToRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPMessage'
      security:
      - AccessToken: []
      summary: Link policies to role
      tags:
      - Roles
      - Policies
  /roles/{role_id}/users:
    delete:
      consumes:
      - application/json
      description: Remove user associations from a specific role
      operationId: 0198042a-f9c5-76f9-9394-170db55f62f4
      parameters:
      - description: The Embeddings Role ID in UUID format
        format: uuid
        in: path
        name: role_id
        required: true
        type: string
      - description: UnLink users from role request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/model.UnlinkUsersFromRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPMessage'
      security:
      - AccessToken: []
      summary: Unlink users from role
      tags:
      - Roles
      - Users
    get:
      description: Retrieve paginated list of users associated with a specific role
      operationId: 0198042a-f9c5-75ff-bbfc-224bf4342886
      parameters:
      - description: The role id in UUID format
        format: uuid
        in: path
        name: role_id
        required: true
        type: string
      - description: 'Comma-separated list of fields to sort by. Example: first_name
          ASC, created_at DESC'
        format: string
        in: query
        name: sort
        type: string
      - description: 'Filter field. Example: id=1 AND first_name=''John'''
        format: string
        in: query
        name: filter
        type: string
      - description: 'Fields to return. Example: id,first_name,last_name'
        format: string
        in: query
        name: fields
        type: string
      - description: Next cursor
        format: string
        in: query
        name: next_token
        type: string
      - description: Previous cursor
        format: string
        in: query
        name: prev_token
        type: string
      - description: Limit
        format: int
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ListUsersResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPMessage'
      security:
      - AccessToken: []
      summary: List users by role
      tags:
      - Users
      - Roles
    post:
      consumes:
      - application/json
      description: Associate multiple users with a specific role for authorization
      operationId: 0198042a-f9c5-76f5-8ff6-b4479bdaa6b6
      parameters:
      - description: The role id in UUID format
        format: uuid
        in: path
        name: role_id
        required: true
        type: string
      - description: Link users to role request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/model.LinkUsersToRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPMessage'
      security:
      - AccessToken: []
      summary: Link users to role
      tags:
      - Roles
      - Users
  /users:
    get:
      description: Retrieve paginated list of all users in the system
      operationId: 0198042a-f9c5-75ef-8ea1-29ecbbe01a2e
      parameters:
      - description: 'Comma-separated list of fields to sort by. Example: first_name
          ASC, created_at DESC'
        format: string
        in: query
        name: sort
        type: string
      - description: 'Filter field. Example: id=1 AND first_name=''John'''
        format: string
        in: query
        name: filter
        type: string
      - description: 'Fields to return. Example: id,first_name,last_name'
        format: string
        in: query
        name: fields
        type: string
      - description: Next cursor
        format: string
        in: query
        name: next_token
        type: string
      - description: Previous cursor
        format: string
        in: query
        name: prev_token
        type: string
      - description: Limit
        format: int
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ListUsersResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPMessage'
      security:
      - AccessToken: []
      summary: List users
      tags:
      - Users
    post:
      consumes:
      - application/json
      description: Create a new user account with specified configuration
      operationId: 0198042a-f9c5-75e3-acf6-6901bb33ae65
      parameters:
      - description: Create user request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/model.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPMessage'
      security:
      - AccessToken: []
      summary: Create user
      tags:
      - Users
  /users/{user_id}:
    delete:
      description: Remove a user account permanently from the system
      operationId: 0198042a-f9c5-75eb-b683-6c1847af7108
      parameters:
      - description: The user ID in UUID format
        format: uuid
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPMessage'
      security:
      - AccessToken: []
      summary: Delete user
      tags:
      - Users
    get:
      description: Retrieve a specific user account by its unique identifier
      operationId: 0198042a-f9c5-75df-b843-b92a4d5c590e
      parameters:
      - description: The user ID in UUID format
        format: uuid
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPMessage'
      security:
      - AccessToken: []
      summary: Get user
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Modify an existing user account by its ID
      operationId: 0198042a-f9c5-75e7-8cb9-231bee55c64e
      parameters:
      - description: The user ID in UUID format
        format: uuid
        in: path
        name: user_id
        required: true
        type: string
      - description: Update user request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/model.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPMessage'
      security:
      - AccessToken: []
      summary: Update user
      tags:
      - Users
  /users/{user_id}/authz:
    get:
      description: Retrieve user authorization permissions and roles for access control
      operationId: 0198042a-f9c5-75fb-b324-ec962beb2277
      parameters:
      - description: The user ID in UUID format
        format: uuid
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPMessage'
      security:
      - AccessToken: []
      summary: Get user authorization
      tags:
      - Users
      - Auth
  /users/{user_id}/roles:
    delete:
      consumes:
      - application/json
      description: Remove role associations from a user within a specific project
      operationId: 0198042a-f9c5-75f7-b802-343518ee3788
      parameters:
      - description: The user ID in UUID format
        format: uuid
        in: path
        name: user_id
        required: true
        type: string
      - description: UnLink Roles Request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/model.UnlinkRolesFromUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPMessage'
      security:
      - AccessToken: []
      summary: Unlink roles from user
      tags:
      - Users
      - Roles
    get:
      description: Retrieve paginated list of roles assigned to a specific user
      operationId: 0198042a-f9c5-7704-b73b-55e2ec093586
      parameters:
      - description: The user id in UUID format
        format: uuid
        in: path
        name: user_id
        required: true
        type: string
      - description: 'Comma-separated list of fields to sort by. Example: first_name
          ASC, created_at DESC'
        format: string
        in: query
        name: sort
        type: string
      - description: 'Filter field. Example: id=1 AND first_name=''John'''
        format: string
        in: query
        name: filter
        type: string
      - description: 'Fields to return. Example: id,first_name,last_name'
        format: string
        in: query
        name: fields
        type: string
      - description: Next cursor
        format: string
        in: query
        name: next_token
        type: string
      - description: Previous cursor
        format: string
        in: query
        name: prev_token
        type: string
      - description: Limit
        format: int
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ListRolesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPMessage'
      security:
      - AccessToken: []
      summary: List roles by user
      tags:
      - Roles
      - Users
    post:
      consumes:
      - application/json
      description: Associate multiple roles with a user within a specific project
      operationId: 0198042a-f9c5-75f3-985f-d30e67bb3688
      parameters:
      - description: The user ID in UUID format
        format: uuid
        in: path
        name: user_id
        required: true
        type: string
      - description: Link Roles Request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.LinkRolesToUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/model.HTTPMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPMessage'
      security:
      - AccessToken: []
      summary: Link roles to user
      tags:
      - Users
      - Roles
  /version:
    get:
      description: Retrieve the current version and build information of the service
      operationId: 0198042a-f9c5-7704-b73b-55e2ec093588
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Version'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPMessage'
      summary: Get version
      tags:
      - Version
securityDefinitions:
  AccessToken:
    description: |-
      It is a bearer token for accessing the API.
      The value must be "Bearer <access_token>"
    in: header
    name: Authorization
    type: apiKey
  RefreshToken:
    description: |-
      It is a bearer token for refreshing the access token.
      The value must be "Bearer <refresh_token>"
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
