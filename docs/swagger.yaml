definitions:
  handler.APIResponse:
    properties:
      message:
        type: string
      method:
        type: string
      path:
        type: string
      status_code:
        type: integer
      timestamp:
        type: string
    type: object
  handler.CreateUserRequest:
    properties:
      email:
        type: string
      first_name:
        type: string
      id:
        type: string
      last_name:
        type: string
    type: object
  handler.ListUsersResponse:
    properties:
      items:
        items:
          $ref: '#/definitions/handler.User'
        type: array
      paginator:
        $ref: '#/definitions/paginator.Paginator'
    type: object
  handler.UpdateUserRequest:
    properties:
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
    type: object
  handler.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: string
      last_name:
        type: string
      updated_at:
        type: string
    type: object
  paginator.Paginator:
    properties:
      limit:
        type: integer
      next_page:
        type: string
      next_token:
        type: string
      prev_page:
        type: string
      prev_token:
        type: string
      size:
        type: integer
    type: object
  service.Check:
    properties:
      data:
        additionalProperties: true
        type: object
      kind:
        type: string
      name:
        type: string
      status:
        type: boolean
    type: object
  service.Health:
    properties:
      checks:
        items:
          $ref: '#/definitions/service.Check'
        type: array
      status:
        type: boolean
    type: object
  version.VersionInfo:
    properties:
      buildDate:
        type: string
      gitBranch:
        type: string
      gitCommit:
        type: string
      goVersion:
        type: string
      goVersionArch:
        type: string
      goVersionOS:
        type: string
      version:
        type: string
    type: object
info:
  contact: {}
  description: |-
    This is a service template for building RESTful APIs in Go.
    It uses a PostgreSQL database to store user information.
    The service provides:
    - CRUD operations for users.
    - Health and version endpoints.
    - Configuration using environment variables or command line arguments.
    - Debug mode to enable debug logging.
    - TLS enabled to secure the communication.
paths:
  /health:
    get:
      description: Get the health of the service
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/service.Health'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.APIResponse'
      summary: Get the health of the service
      tags:
      - service.health
  /healthz:
    get:
      description: Get the health of the service
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/service.Health'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.APIResponse'
      summary: Get the health of the service
      tags:
      - service.health
  /status:
    get:
      description: Get the health of the service
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/service.Health'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.APIResponse'
      summary: Get the health of the service
      tags:
      - service.health
  /users:
    get:
      description: List all users
      parameters:
      - description: 'Comma-separated list of fields to sort by. Example: first_name
          ASC, created_at DESC'
        in: query
        name: sort
        type: string
      - description: 'Filter field. Example: id=1 AND first_name=''John'''
        in: query
        name: filter
        type: string
      - description: 'Fields to return. Example: id,first_name,last_name'
        in: query
        name: fields
        type: string
      - description: Next cursor
        in: query
        name: next_token
        type: string
      - description: Previous cursor
        in: query
        name: prev_token
        type: string
      - description: Limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.ListUsersResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.APIResponse'
      summary: List all users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: |-
        Create a new user from scratch.
        If the id is not provided, it will be generated automatically.
      parameters:
      - description: CreateUserRequest
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/handler.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handler.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.APIResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/handler.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.APIResponse'
      summary: Create a new user.
      tags:
      - users
  /users/{user_id}:
    delete:
      description: Delete a user
      parameters:
      - description: The user ID in UUID format
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.APIResponse'
      summary: Delete a user
      tags:
      - users
    get:
      description: Get a user by ID
      parameters:
      - description: The user ID in UUID format
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.APIResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.APIResponse'
      summary: Get a user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update a user
      parameters:
      - description: The user ID in UUID format
        in: path
        name: user_id
        required: true
        type: string
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/handler.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.APIResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/handler.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.APIResponse'
      summary: Update a user
      tags:
      - users
  /version:
    get:
      description: Get the version of the service
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/version.VersionInfo'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.APIResponse'
      summary: Get the version of the service
      tags:
      - version
swagger: "2.0"
