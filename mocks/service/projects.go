// Code generated by MockGen. DO NOT EDIT.
// Source: projects.go
//
// Generated by this command:
//
//	mockgen -package=mocks -destination=../../mocks/service/projects.go -source=projects.go ProjectsRepository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	model "github.com/p2p-b2b/go-rest-api-service-template/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockProjectsRepository is a mock of ProjectsRepository interface.
type MockProjectsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockProjectsRepositoryMockRecorder
	isgomock struct{}
}

// MockProjectsRepositoryMockRecorder is the mock recorder for MockProjectsRepository.
type MockProjectsRepositoryMockRecorder struct {
	mock *MockProjectsRepository
}

// NewMockProjectsRepository creates a new mock instance.
func NewMockProjectsRepository(ctrl *gomock.Controller) *MockProjectsRepository {
	mock := &MockProjectsRepository{ctrl: ctrl}
	mock.recorder = &MockProjectsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectsRepository) EXPECT() *MockProjectsRepositoryMockRecorder {
	return m.recorder
}

// DeleteByID mocks base method.
func (m *MockProjectsRepository) DeleteByID(ctx context.Context, input *model.DeleteProjectInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockProjectsRepositoryMockRecorder) DeleteByID(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockProjectsRepository)(nil).DeleteByID), ctx, input)
}

// Insert mocks base method.
func (m *MockProjectsRepository) Insert(ctx context.Context, input *model.InsertProjectInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockProjectsRepositoryMockRecorder) Insert(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockProjectsRepository)(nil).Insert), ctx, input)
}

// Select mocks base method.
func (m *MockProjectsRepository) Select(ctx context.Context, input *model.SelectProjectsInput) (*model.SelectProjectsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Select", ctx, input)
	ret0, _ := ret[0].(*model.SelectProjectsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Select indicates an expected call of Select.
func (mr *MockProjectsRepositoryMockRecorder) Select(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockProjectsRepository)(nil).Select), ctx, input)
}

// SelectByID mocks base method.
func (m *MockProjectsRepository) SelectByID(ctx context.Context, id uuid.UUID) (*model.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectByID", ctx, id)
	ret0, _ := ret[0].(*model.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectByID indicates an expected call of SelectByID.
func (mr *MockProjectsRepositoryMockRecorder) SelectByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectByID", reflect.TypeOf((*MockProjectsRepository)(nil).SelectByID), ctx, id)
}

// UpdateByID mocks base method.
func (m *MockProjectsRepository) UpdateByID(ctx context.Context, input *model.UpdateProjectInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByID", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateByID indicates an expected call of UpdateByID.
func (mr *MockProjectsRepositoryMockRecorder) UpdateByID(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByID", reflect.TypeOf((*MockProjectsRepository)(nil).UpdateByID), ctx, input)
}
