// Code generated by MockGen. DO NOT EDIT.
// Source: products.go
//
// Generated by this command:
//
//	mockgen -package=mocks -destination=../../mocks/service/products.go -source=products.go ProductsRepository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	model "github.com/p2p-b2b/go-rest-api-service-template/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockProductsRepository is a mock of ProductsRepository interface.
type MockProductsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockProductsRepositoryMockRecorder
	isgomock struct{}
}

// MockProductsRepositoryMockRecorder is the mock recorder for MockProductsRepository.
type MockProductsRepositoryMockRecorder struct {
	mock *MockProductsRepository
}

// NewMockProductsRepository creates a new mock instance.
func NewMockProductsRepository(ctrl *gomock.Controller) *MockProductsRepository {
	mock := &MockProductsRepository{ctrl: ctrl}
	mock.recorder = &MockProductsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductsRepository) EXPECT() *MockProductsRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockProductsRepository) Delete(ctx context.Context, input *model.DeleteProductInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockProductsRepositoryMockRecorder) Delete(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockProductsRepository)(nil).Delete), ctx, input)
}

// Insert mocks base method.
func (m *MockProductsRepository) Insert(ctx context.Context, input *model.InsertProductInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockProductsRepositoryMockRecorder) Insert(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockProductsRepository)(nil).Insert), ctx, input)
}

// LinkToPaymentProcessor mocks base method.
func (m *MockProductsRepository) LinkToPaymentProcessor(ctx context.Context, input *model.LinkProductToPaymentProcessorInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LinkToPaymentProcessor", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// LinkToPaymentProcessor indicates an expected call of LinkToPaymentProcessor.
func (mr *MockProductsRepositoryMockRecorder) LinkToPaymentProcessor(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LinkToPaymentProcessor", reflect.TypeOf((*MockProductsRepository)(nil).LinkToPaymentProcessor), ctx, input)
}

// Select mocks base method.
func (m *MockProductsRepository) Select(ctx context.Context, input *model.SelectProductsInput) (*model.SelectProductsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Select", ctx, input)
	ret0, _ := ret[0].(*model.SelectProductsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Select indicates an expected call of Select.
func (mr *MockProductsRepositoryMockRecorder) Select(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockProductsRepository)(nil).Select), ctx, input)
}

// SelectByIDByProjectID mocks base method.
func (m *MockProductsRepository) SelectByIDByProjectID(ctx context.Context, id, projectID uuid.UUID) (*model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectByIDByProjectID", ctx, id, projectID)
	ret0, _ := ret[0].(*model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectByIDByProjectID indicates an expected call of SelectByIDByProjectID.
func (mr *MockProductsRepositoryMockRecorder) SelectByIDByProjectID(ctx, id, projectID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectByIDByProjectID", reflect.TypeOf((*MockProductsRepository)(nil).SelectByIDByProjectID), ctx, id, projectID)
}

// SelectByProjectID mocks base method.
func (m *MockProductsRepository) SelectByProjectID(ctx context.Context, projectID uuid.UUID, input *model.SelectProductsInput) (*model.SelectProductsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectByProjectID", ctx, projectID, input)
	ret0, _ := ret[0].(*model.SelectProductsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectByProjectID indicates an expected call of SelectByProjectID.
func (mr *MockProductsRepositoryMockRecorder) SelectByProjectID(ctx, projectID, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectByProjectID", reflect.TypeOf((*MockProductsRepository)(nil).SelectByProjectID), ctx, projectID, input)
}

// UnlinkFromPaymentProcessor mocks base method.
func (m *MockProductsRepository) UnlinkFromPaymentProcessor(ctx context.Context, input *model.UnlinkProductFromPaymentProcessorInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnlinkFromPaymentProcessor", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnlinkFromPaymentProcessor indicates an expected call of UnlinkFromPaymentProcessor.
func (mr *MockProductsRepositoryMockRecorder) UnlinkFromPaymentProcessor(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlinkFromPaymentProcessor", reflect.TypeOf((*MockProductsRepository)(nil).UnlinkFromPaymentProcessor), ctx, input)
}

// Update mocks base method.
func (m *MockProductsRepository) Update(ctx context.Context, input *model.UpdateProductInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockProductsRepositoryMockRecorder) Update(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockProductsRepository)(nil).Update), ctx, input)
}
