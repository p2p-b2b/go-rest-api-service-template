// Code generated by MockGen. DO NOT EDIT.
// Source: policies.go
//
// Generated by this command:
//
//	mockgen -package=mocks -destination=../../mocks/service/policies.go -source=policies.go PoliciesRepository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	model "github.com/p2p-b2b/go-rest-api-service-template/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockResourcesServiceMethods is a mock of ResourcesServiceMethods interface.
type MockResourcesServiceMethods struct {
	ctrl     *gomock.Controller
	recorder *MockResourcesServiceMethodsMockRecorder
	isgomock struct{}
}

// MockResourcesServiceMethodsMockRecorder is the mock recorder for MockResourcesServiceMethods.
type MockResourcesServiceMethodsMockRecorder struct {
	mock *MockResourcesServiceMethods
}

// NewMockResourcesServiceMethods creates a new mock instance.
func NewMockResourcesServiceMethods(ctrl *gomock.Controller) *MockResourcesServiceMethods {
	mock := &MockResourcesServiceMethods{ctrl: ctrl}
	mock.recorder = &MockResourcesServiceMethodsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResourcesServiceMethods) EXPECT() *MockResourcesServiceMethodsMockRecorder {
	return m.recorder
}

// ListMatches mocks base method.
func (m *MockResourcesServiceMethods) ListMatches(ctx context.Context, action, resource string, input *model.ListResourcesInput) (*model.SelectResourcesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMatches", ctx, action, resource, input)
	ret0, _ := ret[0].(*model.SelectResourcesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMatches indicates an expected call of ListMatches.
func (mr *MockResourcesServiceMethodsMockRecorder) ListMatches(ctx, action, resource, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMatches", reflect.TypeOf((*MockResourcesServiceMethods)(nil).ListMatches), ctx, action, resource, input)
}

// MockPoliciesRepository is a mock of PoliciesRepository interface.
type MockPoliciesRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPoliciesRepositoryMockRecorder
	isgomock struct{}
}

// MockPoliciesRepositoryMockRecorder is the mock recorder for MockPoliciesRepository.
type MockPoliciesRepositoryMockRecorder struct {
	mock *MockPoliciesRepository
}

// NewMockPoliciesRepository creates a new mock instance.
func NewMockPoliciesRepository(ctrl *gomock.Controller) *MockPoliciesRepository {
	mock := &MockPoliciesRepository{ctrl: ctrl}
	mock.recorder = &MockPoliciesRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPoliciesRepository) EXPECT() *MockPoliciesRepositoryMockRecorder {
	return m.recorder
}

// DeleteByID mocks base method.
func (m *MockPoliciesRepository) DeleteByID(ctx context.Context, input *model.DeletePolicyInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockPoliciesRepositoryMockRecorder) DeleteByID(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockPoliciesRepository)(nil).DeleteByID), ctx, input)
}

// Insert mocks base method.
func (m *MockPoliciesRepository) Insert(ctx context.Context, input *model.CreatePolicyInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockPoliciesRepositoryMockRecorder) Insert(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockPoliciesRepository)(nil).Insert), ctx, input)
}

// LinkRoles mocks base method.
func (m *MockPoliciesRepository) LinkRoles(ctx context.Context, input *model.LinkRolesToPolicyInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LinkRoles", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// LinkRoles indicates an expected call of LinkRoles.
func (mr *MockPoliciesRepositoryMockRecorder) LinkRoles(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LinkRoles", reflect.TypeOf((*MockPoliciesRepository)(nil).LinkRoles), ctx, input)
}

// Select mocks base method.
func (m *MockPoliciesRepository) Select(ctx context.Context, input *model.SelectPoliciesInput) (*model.SelectPoliciesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Select", ctx, input)
	ret0, _ := ret[0].(*model.SelectPoliciesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Select indicates an expected call of Select.
func (mr *MockPoliciesRepositoryMockRecorder) Select(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockPoliciesRepository)(nil).Select), ctx, input)
}

// SelectByID mocks base method.
func (m *MockPoliciesRepository) SelectByID(ctx context.Context, id uuid.UUID) (*model.Policy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectByID", ctx, id)
	ret0, _ := ret[0].(*model.Policy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectByID indicates an expected call of SelectByID.
func (mr *MockPoliciesRepositoryMockRecorder) SelectByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectByID", reflect.TypeOf((*MockPoliciesRepository)(nil).SelectByID), ctx, id)
}

// SelectByRoleID mocks base method.
func (m *MockPoliciesRepository) SelectByRoleID(ctx context.Context, roleID uuid.UUID, input *model.SelectPoliciesInput) (*model.SelectPoliciesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectByRoleID", ctx, roleID, input)
	ret0, _ := ret[0].(*model.SelectPoliciesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectByRoleID indicates an expected call of SelectByRoleID.
func (mr *MockPoliciesRepositoryMockRecorder) SelectByRoleID(ctx, roleID, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectByRoleID", reflect.TypeOf((*MockPoliciesRepository)(nil).SelectByRoleID), ctx, roleID, input)
}

// UnlinkRoles mocks base method.
func (m *MockPoliciesRepository) UnlinkRoles(ctx context.Context, input *model.UnlinkRolesFromPolicyInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnlinkRoles", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnlinkRoles indicates an expected call of UnlinkRoles.
func (mr *MockPoliciesRepositoryMockRecorder) UnlinkRoles(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlinkRoles", reflect.TypeOf((*MockPoliciesRepository)(nil).UnlinkRoles), ctx, input)
}

// UpdateByID mocks base method.
func (m *MockPoliciesRepository) UpdateByID(ctx context.Context, input *model.UpdatePolicyInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByID", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateByID indicates an expected call of UpdateByID.
func (mr *MockPoliciesRepositoryMockRecorder) UpdateByID(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByID", reflect.TypeOf((*MockPoliciesRepository)(nil).UpdateByID), ctx, input)
}
