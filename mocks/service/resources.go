// Code generated by MockGen. DO NOT EDIT.
// Source: resources.go
//
// Generated by this command:
//
//	mockgen -package=mocks -destination=../../mocks/service/resources.go -source=resources.go ResourcesRepository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	model "github.com/p2p-b2b/go-rest-api-service-template/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockResourcesRepository is a mock of ResourcesRepository interface.
type MockResourcesRepository struct {
	ctrl     *gomock.Controller
	recorder *MockResourcesRepositoryMockRecorder
	isgomock struct{}
}

// MockResourcesRepositoryMockRecorder is the mock recorder for MockResourcesRepository.
type MockResourcesRepositoryMockRecorder struct {
	mock *MockResourcesRepository
}

// NewMockResourcesRepository creates a new mock instance.
func NewMockResourcesRepository(ctrl *gomock.Controller) *MockResourcesRepository {
	mock := &MockResourcesRepository{ctrl: ctrl}
	mock.recorder = &MockResourcesRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResourcesRepository) EXPECT() *MockResourcesRepositoryMockRecorder {
	return m.recorder
}

// Select mocks base method.
func (m *MockResourcesRepository) Select(ctx context.Context, input *model.SelectResourcesInput) (*model.SelectResourcesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Select", ctx, input)
	ret0, _ := ret[0].(*model.SelectResourcesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Select indicates an expected call of Select.
func (mr *MockResourcesRepositoryMockRecorder) Select(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockResourcesRepository)(nil).Select), ctx, input)
}

// SelectByID mocks base method.
func (m *MockResourcesRepository) SelectByID(ctx context.Context, id uuid.UUID) (*model.Resource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectByID", ctx, id)
	ret0, _ := ret[0].(*model.Resource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectByID indicates an expected call of SelectByID.
func (mr *MockResourcesRepositoryMockRecorder) SelectByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectByID", reflect.TypeOf((*MockResourcesRepository)(nil).SelectByID), ctx, id)
}
