// Code generated by MockGen. DO NOT EDIT.
// Source: authz.go
//
// Generated by this command:
//
//	mockgen -package=mocks -destination=../../mocks/service/authz.go -source=authz.go AuthzServiceCache
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockAuthzServiceCache is a mock of AuthzServiceCache interface.
type MockAuthzServiceCache struct {
	ctrl     *gomock.Controller
	recorder *MockAuthzServiceCacheMockRecorder
	isgomock struct{}
}

// MockAuthzServiceCacheMockRecorder is the mock recorder for MockAuthzServiceCache.
type MockAuthzServiceCacheMockRecorder struct {
	mock *MockAuthzServiceCache
}

// NewMockAuthzServiceCache creates a new mock instance.
func NewMockAuthzServiceCache(ctrl *gomock.Controller) *MockAuthzServiceCache {
	mock := &MockAuthzServiceCache{ctrl: ctrl}
	mock.recorder = &MockAuthzServiceCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthzServiceCache) EXPECT() *MockAuthzServiceCacheMockRecorder {
	return m.recorder
}

// GetUserAuthzCacheKey mocks base method.
func (m *MockAuthzServiceCache) GetUserAuthzCacheKey(userID uuid.UUID) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAuthzCacheKey", userID)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetUserAuthzCacheKey indicates an expected call of GetUserAuthzCacheKey.
func (mr *MockAuthzServiceCacheMockRecorder) GetUserAuthzCacheKey(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAuthzCacheKey", reflect.TypeOf((*MockAuthzServiceCache)(nil).GetUserAuthzCacheKey), userID)
}

// InvalidateUserAuthzCache mocks base method.
func (m *MockAuthzServiceCache) InvalidateUserAuthzCache(userID uuid.UUID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InvalidateUserAuthzCache", userID)
}

// InvalidateUserAuthzCache indicates an expected call of InvalidateUserAuthzCache.
func (mr *MockAuthzServiceCacheMockRecorder) InvalidateUserAuthzCache(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvalidateUserAuthzCache", reflect.TypeOf((*MockAuthzServiceCache)(nil).InvalidateUserAuthzCache), userID)
}
