// Code generated by MockGen. DO NOT EDIT.
// Source: roles.go
//
// Generated by this command:
//
//	mockgen -package=mocks -destination=../../mocks/service/roles.go -source=roles.go RolesRepository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	model "github.com/p2p-b2b/go-rest-api-service-template/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockRolesRepository is a mock of RolesRepository interface.
type MockRolesRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRolesRepositoryMockRecorder
	isgomock struct{}
}

// MockRolesRepositoryMockRecorder is the mock recorder for MockRolesRepository.
type MockRolesRepositoryMockRecorder struct {
	mock *MockRolesRepository
}

// NewMockRolesRepository creates a new mock instance.
func NewMockRolesRepository(ctrl *gomock.Controller) *MockRolesRepository {
	mock := &MockRolesRepository{ctrl: ctrl}
	mock.recorder = &MockRolesRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRolesRepository) EXPECT() *MockRolesRepositoryMockRecorder {
	return m.recorder
}

// DeleteByID mocks base method.
func (m *MockRolesRepository) DeleteByID(ctx context.Context, input *model.DeleteRoleInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockRolesRepositoryMockRecorder) DeleteByID(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockRolesRepository)(nil).DeleteByID), ctx, input)
}

// Insert mocks base method.
func (m *MockRolesRepository) Insert(ctx context.Context, input *model.InsertRoleInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockRolesRepositoryMockRecorder) Insert(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockRolesRepository)(nil).Insert), ctx, input)
}

// LinkPolicies mocks base method.
func (m *MockRolesRepository) LinkPolicies(ctx context.Context, input *model.LinkPoliciesToRoleInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LinkPolicies", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// LinkPolicies indicates an expected call of LinkPolicies.
func (mr *MockRolesRepositoryMockRecorder) LinkPolicies(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LinkPolicies", reflect.TypeOf((*MockRolesRepository)(nil).LinkPolicies), ctx, input)
}

// LinkUsers mocks base method.
func (m *MockRolesRepository) LinkUsers(ctx context.Context, input *model.LinkUsersToRoleInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LinkUsers", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// LinkUsers indicates an expected call of LinkUsers.
func (mr *MockRolesRepositoryMockRecorder) LinkUsers(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LinkUsers", reflect.TypeOf((*MockRolesRepository)(nil).LinkUsers), ctx, input)
}

// Select mocks base method.
func (m *MockRolesRepository) Select(ctx context.Context, input *model.SelectRolesInput) (*model.SelectRolesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Select", ctx, input)
	ret0, _ := ret[0].(*model.SelectRolesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Select indicates an expected call of Select.
func (mr *MockRolesRepositoryMockRecorder) Select(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockRolesRepository)(nil).Select), ctx, input)
}

// SelectByID mocks base method.
func (m *MockRolesRepository) SelectByID(ctx context.Context, id uuid.UUID) (*model.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectByID", ctx, id)
	ret0, _ := ret[0].(*model.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectByID indicates an expected call of SelectByID.
func (mr *MockRolesRepositoryMockRecorder) SelectByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectByID", reflect.TypeOf((*MockRolesRepository)(nil).SelectByID), ctx, id)
}

// SelectByPolicyID mocks base method.
func (m *MockRolesRepository) SelectByPolicyID(ctx context.Context, policyID uuid.UUID, input *model.SelectRolesInput) (*model.SelectRolesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectByPolicyID", ctx, policyID, input)
	ret0, _ := ret[0].(*model.SelectRolesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectByPolicyID indicates an expected call of SelectByPolicyID.
func (mr *MockRolesRepositoryMockRecorder) SelectByPolicyID(ctx, policyID, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectByPolicyID", reflect.TypeOf((*MockRolesRepository)(nil).SelectByPolicyID), ctx, policyID, input)
}

// SelectByUserID mocks base method.
func (m *MockRolesRepository) SelectByUserID(ctx context.Context, userID uuid.UUID, input *model.SelectRolesInput) (*model.SelectRolesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectByUserID", ctx, userID, input)
	ret0, _ := ret[0].(*model.SelectRolesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectByUserID indicates an expected call of SelectByUserID.
func (mr *MockRolesRepositoryMockRecorder) SelectByUserID(ctx, userID, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectByUserID", reflect.TypeOf((*MockRolesRepository)(nil).SelectByUserID), ctx, userID, input)
}

// UnlinkPolicies mocks base method.
func (m *MockRolesRepository) UnlinkPolicies(ctx context.Context, input *model.UnlinkPoliciesFromRoleInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnlinkPolicies", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnlinkPolicies indicates an expected call of UnlinkPolicies.
func (mr *MockRolesRepositoryMockRecorder) UnlinkPolicies(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlinkPolicies", reflect.TypeOf((*MockRolesRepository)(nil).UnlinkPolicies), ctx, input)
}

// UnlinkUsers mocks base method.
func (m *MockRolesRepository) UnlinkUsers(ctx context.Context, input *model.UnlinkUsersFromRoleInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnlinkUsers", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnlinkUsers indicates an expected call of UnlinkUsers.
func (mr *MockRolesRepositoryMockRecorder) UnlinkUsers(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlinkUsers", reflect.TypeOf((*MockRolesRepository)(nil).UnlinkUsers), ctx, input)
}

// UpdateByID mocks base method.
func (m *MockRolesRepository) UpdateByID(ctx context.Context, input *model.UpdateRoleInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByID", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateByID indicates an expected call of UpdateByID.
func (mr *MockRolesRepositoryMockRecorder) UpdateByID(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByID", reflect.TypeOf((*MockRolesRepository)(nil).UpdateByID), ctx, input)
}
