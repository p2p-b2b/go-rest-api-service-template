// Code generated by MockGen. DO NOT EDIT.
// Source: products.go
//
// Generated by this command:
//
//	mockgen -package=mocks -destination=../../../mocks/handler/products.go -source=products.go ProductsService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	model "github.com/p2p-b2b/go-rest-api-service-template/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockProductsService is a mock of ProductsService interface.
type MockProductsService struct {
	ctrl     *gomock.Controller
	recorder *MockProductsServiceMockRecorder
	isgomock struct{}
}

// MockProductsServiceMockRecorder is the mock recorder for MockProductsService.
type MockProductsServiceMockRecorder struct {
	mock *MockProductsService
}

// NewMockProductsService creates a new mock instance.
func NewMockProductsService(ctrl *gomock.Controller) *MockProductsService {
	mock := &MockProductsService{ctrl: ctrl}
	mock.recorder = &MockProductsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductsService) EXPECT() *MockProductsServiceMockRecorder {
	return m.recorder
}

// CreateByProjectID mocks base method.
func (m *MockProductsService) CreateByProjectID(ctx context.Context, input *model.CreateProductInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateByProjectID", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateByProjectID indicates an expected call of CreateByProjectID.
func (mr *MockProductsServiceMockRecorder) CreateByProjectID(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateByProjectID", reflect.TypeOf((*MockProductsService)(nil).CreateByProjectID), ctx, input)
}

// DeleteByIDByProjectID mocks base method.
func (m *MockProductsService) DeleteByIDByProjectID(ctx context.Context, input *model.DeleteProductInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByIDByProjectID", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByIDByProjectID indicates an expected call of DeleteByIDByProjectID.
func (mr *MockProductsServiceMockRecorder) DeleteByIDByProjectID(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByIDByProjectID", reflect.TypeOf((*MockProductsService)(nil).DeleteByIDByProjectID), ctx, input)
}

// GetByIDByProjectID mocks base method.
func (m *MockProductsService) GetByIDByProjectID(ctx context.Context, projectID, id uuid.UUID) (*model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIDByProjectID", ctx, projectID, id)
	ret0, _ := ret[0].(*model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDByProjectID indicates an expected call of GetByIDByProjectID.
func (mr *MockProductsServiceMockRecorder) GetByIDByProjectID(ctx, projectID, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDByProjectID", reflect.TypeOf((*MockProductsService)(nil).GetByIDByProjectID), ctx, projectID, id)
}

// LinkToPaymentProcessor mocks base method.
func (m *MockProductsService) LinkToPaymentProcessor(ctx context.Context, input *model.LinkProductToPaymentProcessorInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LinkToPaymentProcessor", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// LinkToPaymentProcessor indicates an expected call of LinkToPaymentProcessor.
func (mr *MockProductsServiceMockRecorder) LinkToPaymentProcessor(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LinkToPaymentProcessor", reflect.TypeOf((*MockProductsService)(nil).LinkToPaymentProcessor), ctx, input)
}

// List mocks base method.
func (m *MockProductsService) List(ctx context.Context, input *model.ListProductsInput) (*model.ListProductsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, input)
	ret0, _ := ret[0].(*model.ListProductsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockProductsServiceMockRecorder) List(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockProductsService)(nil).List), ctx, input)
}

// ListByProjectID mocks base method.
func (m *MockProductsService) ListByProjectID(ctx context.Context, projectID uuid.UUID, input *model.ListProductsInput) (*model.ListProductsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByProjectID", ctx, projectID, input)
	ret0, _ := ret[0].(*model.ListProductsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByProjectID indicates an expected call of ListByProjectID.
func (mr *MockProductsServiceMockRecorder) ListByProjectID(ctx, projectID, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByProjectID", reflect.TypeOf((*MockProductsService)(nil).ListByProjectID), ctx, projectID, input)
}

// UnlinkFromPaymentProcessor mocks base method.
func (m *MockProductsService) UnlinkFromPaymentProcessor(ctx context.Context, input *model.UnlinkProductFromPaymentProcessorInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnlinkFromPaymentProcessor", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnlinkFromPaymentProcessor indicates an expected call of UnlinkFromPaymentProcessor.
func (mr *MockProductsServiceMockRecorder) UnlinkFromPaymentProcessor(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlinkFromPaymentProcessor", reflect.TypeOf((*MockProductsService)(nil).UnlinkFromPaymentProcessor), ctx, input)
}

// UpdateByIDByProjectID mocks base method.
func (m *MockProductsService) UpdateByIDByProjectID(ctx context.Context, input *model.UpdateProductInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByIDByProjectID", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateByIDByProjectID indicates an expected call of UpdateByIDByProjectID.
func (mr *MockProductsServiceMockRecorder) UpdateByIDByProjectID(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByIDByProjectID", reflect.TypeOf((*MockProductsService)(nil).UpdateByIDByProjectID), ctx, input)
}
