// Code generated by MockGen. DO NOT EDIT.
// Source: roles.go
//
// Generated by this command:
//
//	mockgen -package=mocks -destination=../../../mocks/handler/roles.go -source=roles.go RolesService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	model "github.com/p2p-b2b/go-rest-api-service-template/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockRolesService is a mock of RolesService interface.
type MockRolesService struct {
	ctrl     *gomock.Controller
	recorder *MockRolesServiceMockRecorder
	isgomock struct{}
}

// MockRolesServiceMockRecorder is the mock recorder for MockRolesService.
type MockRolesServiceMockRecorder struct {
	mock *MockRolesService
}

// NewMockRolesService creates a new mock instance.
func NewMockRolesService(ctrl *gomock.Controller) *MockRolesService {
	mock := &MockRolesService{ctrl: ctrl}
	mock.recorder = &MockRolesServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRolesService) EXPECT() *MockRolesServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRolesService) Create(ctx context.Context, input *model.CreateRoleInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockRolesServiceMockRecorder) Create(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRolesService)(nil).Create), ctx, input)
}

// DeleteByID mocks base method.
func (m *MockRolesService) DeleteByID(ctx context.Context, input *model.DeleteRoleInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockRolesServiceMockRecorder) DeleteByID(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockRolesService)(nil).DeleteByID), ctx, input)
}

// GetByID mocks base method.
func (m *MockRolesService) GetByID(ctx context.Context, id uuid.UUID) (*model.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*model.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockRolesServiceMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockRolesService)(nil).GetByID), ctx, id)
}

// LinkPolicies mocks base method.
func (m *MockRolesService) LinkPolicies(ctx context.Context, input *model.LinkPoliciesToRoleInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LinkPolicies", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// LinkPolicies indicates an expected call of LinkPolicies.
func (mr *MockRolesServiceMockRecorder) LinkPolicies(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LinkPolicies", reflect.TypeOf((*MockRolesService)(nil).LinkPolicies), ctx, input)
}

// LinkUsers mocks base method.
func (m *MockRolesService) LinkUsers(ctx context.Context, input *model.LinkUsersToRoleInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LinkUsers", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// LinkUsers indicates an expected call of LinkUsers.
func (mr *MockRolesServiceMockRecorder) LinkUsers(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LinkUsers", reflect.TypeOf((*MockRolesService)(nil).LinkUsers), ctx, input)
}

// List mocks base method.
func (m *MockRolesService) List(ctx context.Context, input *model.ListRolesInput) (*model.ListRolesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, input)
	ret0, _ := ret[0].(*model.ListRolesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockRolesServiceMockRecorder) List(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRolesService)(nil).List), ctx, input)
}

// ListByPolicyID mocks base method.
func (m *MockRolesService) ListByPolicyID(ctx context.Context, policyID uuid.UUID, input *model.ListRolesInput) (*model.ListRolesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByPolicyID", ctx, policyID, input)
	ret0, _ := ret[0].(*model.ListRolesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByPolicyID indicates an expected call of ListByPolicyID.
func (mr *MockRolesServiceMockRecorder) ListByPolicyID(ctx, policyID, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByPolicyID", reflect.TypeOf((*MockRolesService)(nil).ListByPolicyID), ctx, policyID, input)
}

// ListByUserID mocks base method.
func (m *MockRolesService) ListByUserID(ctx context.Context, userID uuid.UUID, input *model.ListRolesInput) (*model.ListRolesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByUserID", ctx, userID, input)
	ret0, _ := ret[0].(*model.ListRolesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByUserID indicates an expected call of ListByUserID.
func (mr *MockRolesServiceMockRecorder) ListByUserID(ctx, userID, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByUserID", reflect.TypeOf((*MockRolesService)(nil).ListByUserID), ctx, userID, input)
}

// UnlinkPolicies mocks base method.
func (m *MockRolesService) UnlinkPolicies(ctx context.Context, input *model.UnlinkPoliciesFromRoleInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnlinkPolicies", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnlinkPolicies indicates an expected call of UnlinkPolicies.
func (mr *MockRolesServiceMockRecorder) UnlinkPolicies(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlinkPolicies", reflect.TypeOf((*MockRolesService)(nil).UnlinkPolicies), ctx, input)
}

// UnlinkUsers mocks base method.
func (m *MockRolesService) UnlinkUsers(ctx context.Context, input *model.UnlinkUsersFromRoleInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnlinkUsers", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnlinkUsers indicates an expected call of UnlinkUsers.
func (mr *MockRolesServiceMockRecorder) UnlinkUsers(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlinkUsers", reflect.TypeOf((*MockRolesService)(nil).UnlinkUsers), ctx, input)
}

// UpdateByID mocks base method.
func (m *MockRolesService) UpdateByID(ctx context.Context, input *model.UpdateRoleInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByID", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateByID indicates an expected call of UpdateByID.
func (mr *MockRolesServiceMockRecorder) UpdateByID(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByID", reflect.TypeOf((*MockRolesService)(nil).UpdateByID), ctx, input)
}
