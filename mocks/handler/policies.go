// Code generated by MockGen. DO NOT EDIT.
// Source: policies.go
//
// Generated by this command:
//
//	mockgen -package=mocks -destination=../../../mocks/handler/policies.go -source=policies.go PoliciesService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	model "github.com/p2p-b2b/go-rest-api-service-template/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockPoliciesService is a mock of PoliciesService interface.
type MockPoliciesService struct {
	ctrl     *gomock.Controller
	recorder *MockPoliciesServiceMockRecorder
	isgomock struct{}
}

// MockPoliciesServiceMockRecorder is the mock recorder for MockPoliciesService.
type MockPoliciesServiceMockRecorder struct {
	mock *MockPoliciesService
}

// NewMockPoliciesService creates a new mock instance.
func NewMockPoliciesService(ctrl *gomock.Controller) *MockPoliciesService {
	mock := &MockPoliciesService{ctrl: ctrl}
	mock.recorder = &MockPoliciesServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPoliciesService) EXPECT() *MockPoliciesServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPoliciesService) Create(ctx context.Context, input *model.CreatePolicyInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockPoliciesServiceMockRecorder) Create(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPoliciesService)(nil).Create), ctx, input)
}

// DeleteByID mocks base method.
func (m *MockPoliciesService) DeleteByID(ctx context.Context, input *model.DeletePolicyInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockPoliciesServiceMockRecorder) DeleteByID(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockPoliciesService)(nil).DeleteByID), ctx, input)
}

// GetByID mocks base method.
func (m *MockPoliciesService) GetByID(ctx context.Context, id uuid.UUID) (*model.Policy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*model.Policy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockPoliciesServiceMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockPoliciesService)(nil).GetByID), ctx, id)
}

// LinkRoles mocks base method.
func (m *MockPoliciesService) LinkRoles(ctx context.Context, input *model.LinkRolesToPolicyInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LinkRoles", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// LinkRoles indicates an expected call of LinkRoles.
func (mr *MockPoliciesServiceMockRecorder) LinkRoles(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LinkRoles", reflect.TypeOf((*MockPoliciesService)(nil).LinkRoles), ctx, input)
}

// List mocks base method.
func (m *MockPoliciesService) List(ctx context.Context, input *model.ListPoliciesInput) (*model.ListPoliciesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, input)
	ret0, _ := ret[0].(*model.ListPoliciesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockPoliciesServiceMockRecorder) List(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPoliciesService)(nil).List), ctx, input)
}

// ListByRoleID mocks base method.
func (m *MockPoliciesService) ListByRoleID(ctx context.Context, roleID uuid.UUID, input *model.ListPoliciesInput) (*model.ListPoliciesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByRoleID", ctx, roleID, input)
	ret0, _ := ret[0].(*model.ListPoliciesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByRoleID indicates an expected call of ListByRoleID.
func (mr *MockPoliciesServiceMockRecorder) ListByRoleID(ctx, roleID, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByRoleID", reflect.TypeOf((*MockPoliciesService)(nil).ListByRoleID), ctx, roleID, input)
}

// UnlinkRoles mocks base method.
func (m *MockPoliciesService) UnlinkRoles(ctx context.Context, input *model.UnlinkRolesFromPolicyInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnlinkRoles", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnlinkRoles indicates an expected call of UnlinkRoles.
func (mr *MockPoliciesServiceMockRecorder) UnlinkRoles(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlinkRoles", reflect.TypeOf((*MockPoliciesService)(nil).UnlinkRoles), ctx, input)
}

// UpdateByID mocks base method.
func (m *MockPoliciesService) UpdateByID(ctx context.Context, input *model.UpdatePolicyInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByID", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateByID indicates an expected call of UpdateByID.
func (mr *MockPoliciesServiceMockRecorder) UpdateByID(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByID", reflect.TypeOf((*MockPoliciesService)(nil).UpdateByID), ctx, input)
}
