// Code generated by MockGen. DO NOT EDIT.
// Source: resources.go
//
// Generated by this command:
//
//	mockgen -package=mocks -destination=../../../mocks/handler/resources.go -source=resources.go ResourcesService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	model "github.com/p2p-b2b/go-rest-api-service-template/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockResourcesService is a mock of ResourcesService interface.
type MockResourcesService struct {
	ctrl     *gomock.Controller
	recorder *MockResourcesServiceMockRecorder
	isgomock struct{}
}

// MockResourcesServiceMockRecorder is the mock recorder for MockResourcesService.
type MockResourcesServiceMockRecorder struct {
	mock *MockResourcesService
}

// NewMockResourcesService creates a new mock instance.
func NewMockResourcesService(ctrl *gomock.Controller) *MockResourcesService {
	mock := &MockResourcesService{ctrl: ctrl}
	mock.recorder = &MockResourcesServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResourcesService) EXPECT() *MockResourcesServiceMockRecorder {
	return m.recorder
}

// GetByID mocks base method.
func (m *MockResourcesService) GetByID(ctx context.Context, id uuid.UUID) (*model.Resource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*model.Resource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockResourcesServiceMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockResourcesService)(nil).GetByID), ctx, id)
}

// List mocks base method.
func (m *MockResourcesService) List(ctx context.Context, input *model.ListResourcesInput) (*model.ListResourcesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, input)
	ret0, _ := ret[0].(*model.ListResourcesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockResourcesServiceMockRecorder) List(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockResourcesService)(nil).List), ctx, input)
}

// ListMatches mocks base method.
func (m *MockResourcesService) ListMatches(ctx context.Context, action, resource string, input *model.ListResourcesInput) (*model.ListResourcesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMatches", ctx, action, resource, input)
	ret0, _ := ret[0].(*model.ListResourcesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMatches indicates an expected call of ListMatches.
func (mr *MockResourcesServiceMockRecorder) ListMatches(ctx, action, resource, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMatches", reflect.TypeOf((*MockResourcesService)(nil).ListMatches), ctx, action, resource, input)
}
